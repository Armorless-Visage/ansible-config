# Liam Nolan 2017 (c) BSD 2-Clause

##    Variables    ##

admin = "{192.168.99.9,10.99.99.6}"


##    Settings    ##
set skip on lo0
#set skip on enc0 
set block-policy drop
set loginterface egress
set state-policy if-bound 
set ruleset-optimization none # this blows away rule ordering if turned on
set limit table-entries 1000000

#    Queues    ##
# a bug in queueing gives an error like below when using 'egress' for the
# parent queue. Fix is to use the interface name itself

# $ doas pfctl -s queue
# pfctl: DIOCGETQSTATS: Bad file descriptor

# ref: http://openbsd-archive.7691.n7.nabble.com/pfctl-DIOCGETQSTATS-Bad-file-descriptor-td287337.html

queue upload on re0 bandwidth		9850K
queue std parent upload bandwidth       500K    default # keeping this low as expecting traffic in other queues
queue top parent upload bandwidth       4000K   # second queue/lowdelay/empy ACK
queue web parent upload bandwidth       2000K   # ports 80, 443, 21, 8080
queue dns parent upload bandwidth       900K    max 1000K burst 5000K for 300ms
queue torrents parent upload bandwidth  500K    max 5500K qlimit 250
queue ntp parent upload bandwidth       500K	# ntp should have some reserved bw
queue low parent upload bandwidth       1000K 	# port 1-1024
queue hi  parent upload bandwidth       1000K max 8000K burst 9000K for 500ms # port 1025-65535

##    Policy    ##
# default deny
block log all
block return log quick on ingress inet6
block log quick inet6

## pre scrub
# allow ssh to router from adm
pass in quick on vlan9 inet proto tcp from $admin to any port 22 keep state
# allow adm to look at modem
pass out quick on egress inet proto tcp from any to 192.168.100.1 port 80 tagged ingress-traffic keep state
# iperf
#pass in quick on ingress inet proto {tcp, udp} from $admin to self port 5201 keep state

# scrub, urpf and fireplaster
anchor scrub_anchor
load anchor scrub_anchor from "/etc/anchor_scrub"

# ingress filtering
anchor ingress_anchor on ingress
load anchor ingress_anchor from "/etc/anchor_ingress"

# redirect dns/ntp traffic to local servers
anchor intercept_anchor
load anchor intercept_anchor from "/etc/anchor_intercept"

# some ps4 games need port address translation turned off (static-port)
# ps4 traffic will get tagged ps4
anchor ps4_anchor from 192.168.99.20
load anchor ps4_anchor from "/etc/anchor_ps4"
# torrent server gets an anchor
# server traffic will get the torrents tag and static-port nat is performed
anchor torrents_anchor 
load anchor torrents_anchor from "/etc/anchor_torrents"
# wlan rules
anchor wlan_anchor on wlan
load anchor wlan_anchor from "/etc/anchor_wlan"

# pass everything out from self
pass out inet proto {tcp,udp} from self to any keep state

# rules for egress interface (keep this last)
anchor egress_anchor on egress
load anchor egress_anchor from "/etc/anchor_egress"
