# Liam Nolan 2017 (c) BSD 2-Clause

##    Variables    ##
web_ports = "{ 80, 443, 21, 8080 }"
hi_ports = "{ 1025:65535 }"
lo_ports = "{ 1:1024 }"

admin = "{192.168.99.9,10.99.99.6}"

egress_icmp = "{echoreq, trace}"

##    Settings    ##
set skip on lo0
#set skip on enc0 
set block-policy drop
set loginterface egress    
set state-policy if-bound 
set ruleset-optimization none # this blows away rule ordering if turned on
set limit table-entries 1000000

##    Queues    ##
queue upload on egress bandwidth 	9850K
queue std parent upload bandwidth 	500K 	default # keeping this low as expecting traffic in other queues
queue top parent upload bandwidth 	4000K 	# second queue/lowdelay/empy ACK 
queue web parent upload bandwidth	2000K 	# ports 80, 443, 21, 8080	
queue dns parent upload bandwidth 	900K 	max 1000K burst 5000K for 500ms  
queue torrents parent upload bandwidth 	500K 	max 5500K qlimit 500
queue ntp parent upload bandwidth 	500K
queue low parent upload bandwidth 	1000K # port 1-1024
queue hi  parent upload bandwidth 	1000K # port 1025-6553
# flow queue
#queue fq on re0 flows 1024

##    Policy    ##
# default deny
block log all
# allow ssh to router from adm
pass in quick on vlan9 inet proto tcp from $admin to self port 22 keep state tag ssh
# allow adm to look at modem
pass out quick on egress inet proto tcp from any to 192.168.100.1 port 80 tagged ingress-traffic keep state
# iperf
#pass in quick on ingress inet proto {tcp, udp} from $admin to self port 5201 keep state

# tag everything as input to pass through scrub in anchor_scrub
match in all tag input

# urpf, scrub and fireplaster
anchor scrub_anchor
load anchor scrub_anchor from "/etc/anchor_scrub"

# this tags most lan traffic 'ingress-traffic' for policy filtering
# without tagging and just using group:network macros this ruleset is 500+ rules
match in on ingress inet from ingress:network to any tagged scrubbed tag ingress-traffic

# some ps4 games need port address translation turned off (static-port)
# ps4 traffic will get tagged ps4
anchor ps4_anchor
load anchor ps4_anchor from "/etc/anchor_ps4"
# torrent server gets an anchor
# server traffic will get the torrents tag and static-port nat is performed
anchor torrents_anchor
load anchor torrents_anchor from "/etc/anchor_torrents"
# intercept dns/ntp traffic outbound and redirect to local services
anchor intercept_anchor
load anchor intercept_anchor from "/etc/anchor_intercept"
# wlan rules
anchor wlan_anchor
load anchor wlan_anchor from "/etc/anchor_wlan"

# main NAT rule
# this will only accept packets with tag 'scrubbed' from anchor_scrub 
match out on egress inet from any to any tagged ingress-traffic nat-to (egress:0)
# plex doesn't like its clients being in a different subnet so nat is done
# here. plex has acl's but it gives a "no soup for you" error to signed in
# clients :(
match out on vlan3 inet proto {tcp, udp} from any to 192.168.33.7 port 32400 tagged ingress-traffic nat-to (vlan3:0)

# allow internal traffic to pass in
pass in inet tagged ingress-traffic keep state
# soft block internal traffic from hitting local(self) interfaces
block in inet from any to ingress

anchor internal_anchor
load anchor internal_anchor from "/etc/anchor_internal"

# set upload queues 
pass out on egress inet proto {tcp, udp} to port $lo_ports modulate state set queue (low, top)
pass out on egress inet proto {tcp, udp} to port $hi_ports modulate state set queue (hi, top)
pass out on egress inet proto {tcp, udp} to port 53 modulate state set queue (dns, dns)
pass out on egress inet proto udp to port 123 modulate state set queue (ntp, ntp)
pass out on egress inet proto tcp to port $web_ports modulate state set queue (web, top)
# allow approved icmp types out
pass out on egress inet proto icmp all icmp-type $egress_icmp keep state set queue (std, top) 

