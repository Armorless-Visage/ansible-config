# Liam Nolan 2017 (c) BSD 2-Clause

##    Variables    ##
icmp_pass = "{ echoreq, unreach, trace }" 
web_ports = "{ 80, 443, 21, 8080 }"
hi_ports = "{ 1025:65535 }"
lo_ports = "{ 1:1024 }"
#internal_ports = "{ 9091, 32400, 22, 80, samba, dns, ntp }"
internal_tcp_ports = "{ 9091, 32400, 22, 80, 53, 2049, 514, 139, 445 }"
internal_udp_ports = "{ 53, 123, 137, 138 }"
# nfs/smb
fileserver = 192.168.33.55
fileserver_ports = "{907,rpcbind,nfs,sunrpc}"

# ports open on self
tcp_ports = "{ 53 }"
udp_ports = "{ 53, 67, 123, 500, 4500 }"

admin = "{192.168.99.9,10.99.99.6}"

##    Settings    ##
set skip on lo0
set block-policy drop
set loginterface egress    
set state-policy if-bound 
set ruleset-optimization none # this blows away rule ordering if turned on
set limit table-entries 1000000

##    Queues    ##
queue upload on egress bandwidth 	9850K
queue std parent upload bandwidth 	500K 	default # keeping this low as expecting traffic in other queues
queue top parent upload bandwidth 	4000K 	# second queue/lowdelay/empy ACK 
queue web parent upload bandwidth	2000K 	# ports 80, 443, 21, 8080	
queue dns parent upload bandwidth 	900K 	max 1000K burst 5000K for 500ms  
queue torrents parent upload bandwidth 	500K 	max 5500K qlimit 500
queue ntp parent upload bandwidth 	500K
queue low parent upload bandwidth 	1000K # port 1-1024
queue hi  parent upload bandwidth 	1000K # port 1025-6553
# flow queue
#queue fq on re0 flows 1024

##    Policy    ##
# default deny
block log all
# allow ssh to router from adm
pass in quick on vlan9 inet proto tcp from $admin to self port 22 keep state tag ssh
# allow adm to look at modem
pass out quick on egress inet proto tcp from ingress:network to 192.168.100.1 port 80 keep state
# iperf
#pass in quick on ingress inet proto {tcp, udp} from $admin to self port 5201 keep state

# tag everything as input to pass through scrub in anchor_scrub
match in all tag input

# urpf, scrub and fireplaster
anchor scrub_anchor
load anchor scrub_anchor from "/etc/anchor_scrub"
# some ps4 games need port address translation turned off (static-port)
# ps4 traffic will get tagged ps4
anchor ps4_anchor
load anchor ps4_anchor from "/etc/anchor_ps4"
# torrent server gets an anchor
# server traffic will get the torrents tag and static-port nat is performed
anchor torrents_anchor
load anchor torrents_anchor from "/etc/anchor_torrents"
# intercept dns/ntp traffic outbound and redirect to local services
anchor intercept_anchor
load anchor intercept_anchor from "/etc/anchor_intercept"
# wlan rules
anchor wlan_anchor
load anchor wlan_anchor from "/etc/anchor_wlan"

# main NAT rule
# this will only accept packets with tag 'scrubbed' from anchor_scrub 
match out on egress inet from ingress:network to any tagged scrubbed nat-to (egress:0)
# plex doesn't like its clients being in a different subnet so nat is done
# here. plex has acl's but it gives a "no soup for you" error to signed in
# clients :(
match out on vlan3 inet proto {tcp, udp} from ingress:network to 192.168.33.7 port 32400 nat-to (vlan3:0)

# allow internal traffic to pass in
pass in on ingress inet from ingress:network keep state
# soft block internal traffic from hitting local(self) interfaces
block in on ingress inet from ingress:network to ingress # this is creating lots of rules
# pass internal traffic to self on used ports
pass in quick on ingress inet proto tcp from ingress:network to ingress port $tcp_ports keep state
pass in quick on ingress inet proto udp from ingress:network to ingress port $udp_ports keep state
# allow some icmp types to self
pass in quick on ingress inet proto icmp from ingress:network to ingress icmp-type $icmp_pass keep state
# allow internal traffic to pass to vlans
pass out quick on ingress inet proto tcp from ingress:network to ingress:network port $internal_tcp_ports keep state
pass out quick on ingress inet proto udp from ingress:network to ingress:network port $internal_udp_ports keep state
pass out quick on ingress inet proto {tcp,udp} from ingress:network to $fileserver port $fileserver_ports keep state
# allow from self to internal networks
pass out quick on ingress inet from self to ingress:network keep state

# set upload queues 
pass out on egress inet proto {tcp, udp} to port $lo_ports modulate state set queue (low, top)
pass out on egress inet proto {tcp, udp} to port $hi_ports modulate state set queue (hi, top)
pass out on egress inet proto {tcp, udp} to port 53 modulate state set queue (dns, dns)
pass out on egress inet proto udp to port 123 modulate state set queue (ntp, ntp)
pass out on egress inet proto tcp to port $web_ports modulate state set queue (web, top)
# allow approved icmp types out
pass out on egress inet proto icmp all icmp-type $icmp_pass keep state set queue (std, top) 

# fq
#pass out on egress inet proto {tcp, udp} to port $lo_ports modulate state 
#pass out on egress inet proto {tcp, udp} to port $hi_ports modulate state 
#pass out on egress inet proto {tcp, udp} to port 53 modulate state 
#pass out on egress inet proto udp to port 123 modulate state 
#pass out on egress inet proto tcp to port $web_ports modulate state 
# allow approved icmp types out
#pass out on egress inet proto icmp all icmp-type $icmp_pass keep state 
